-- Drop existing tables if they exist
DROP TABLE IF EXISTS `flashcards`;
DROP TABLE IF EXISTS `groups`;

-- Create the groups table
CREATE TABLE `groups` (
    `id` VARCHAR(36) NOT NULL,
    `name` VARCHAR(255) NOT NULL,
    `description` TEXT,
    `user_id` VARCHAR(36) NOT NULL,
    `created_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (`id`),
    INDEX `idx_user_groups` (`user_id`),
    CONSTRAINT `fk_group_user` 
    FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) 
    ON DELETE CASCADE 
    ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

-- Create the flashcards table
CREATE TABLE `flashcards` (
    `id` VARCHAR(36) NOT NULL,
    `question` TEXT NOT NULL,
    `answer` TEXT NOT NULL,
    `explanation` TEXT,
    `user_id` VARCHAR(36) NOT NULL,
    `times_reviewed` INT NOT NULL DEFAULT 0,
    `correct_answers` INT NOT NULL DEFAULT 0,
    `incorrect_answers` INT NOT NULL DEFAULT 0,
    `success_rate` FLOAT NOT NULL DEFAULT 0,
    `last_reviewed_at` TIMESTAMP NULL,
    `difficulty_level` INT NOT NULL DEFAULT 1,
    `group_id` VARCHAR(36) NOT NULL,
    `created_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (`id`),
    INDEX `idx_user_flashcards` (`user_id`),
    INDEX `idx_group_id` (`group_id`),
    CONSTRAINT `fk_flashcard_user` 
    FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) 
    ON DELETE CASCADE 
    ON UPDATE CASCADE,
    CONSTRAINT `fk_flashcard_group` 
    FOREIGN KEY (`group_id`) REFERENCES `groups` (`id`) 
    ON DELETE CASCADE 
    ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

-- Create trigger to update success_rate when answers are updated
DELIMITER //
CREATE TRIGGER update_success_rate
BEFORE UPDATE ON flashcards
FOR EACH ROW
BEGIN
    IF NEW.correct_answers != OLD.correct_answers OR NEW.incorrect_answers != OLD.incorrect_answers THEN
        SET NEW.success_rate = 
            CASE 
                WHEN (NEW.correct_answers + NEW.incorrect_answers) > 0 
                THEN (NEW.correct_answers / (NEW.correct_answers + NEW.incorrect_answers)) * 100
                ELSE 0 
            END;
    END IF;
END//
DELIMITER ;

-- Create view for user statistics
CREATE OR REPLACE VIEW `user_flashcard_statistics` AS
SELECT 
    f.user_id,
    CONCAT(u.firstName, ' ', u.lastName) as user_name,
    g.name as group_name,
    COUNT(*) as total_cards,
    SUM(f.times_reviewed) as total_reviews,
    AVG(f.success_rate) as average_success_rate,
    SUM(CASE WHEN f.last_reviewed_at IS NULL THEN 1 ELSE 0 END) as unreviewed_cards
FROM flashcards f
JOIN `groups` g ON f.group_id = g.id
JOIN `users` u ON f.user_id = u.id
WHERE u.isDeleted = 0 AND u.isBlocked = 0
GROUP BY f.user_id, g.name;

-- Create view for daily progress
CREATE OR REPLACE VIEW `user_daily_progress` AS
SELECT 
    f.user_id,
    CONCAT(u.firstName, ' ', u.lastName) as user_name,
    DATE(f.created_at) as review_date,
    COUNT(*) as cards_reviewed,
    SUM(CASE WHEN f.correct_answers > 0 THEN 1 ELSE 0 END) as cards_mastered,
    AVG(f.success_rate) as daily_success_rate
FROM flashcards f
JOIN users u ON f.user_id = u.id
WHERE f.created_at >= CURDATE() - INTERVAL 30 DAY
    AND u.isDeleted = 0 
    AND u.isBlocked = 0
GROUP BY f.user_id, DATE(f.created_at)
ORDER BY review_date DESC;